name: CodeWar CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]
        mongodb-version: [4.4]

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Start MongoDB
      uses: supercharge/mongodb-github-action@1.10.0
      with:
        mongodb-version: ${{ matrix.mongodb-version }}
    
    - name: Install Dependencies
      run: |
        npm install
        cd client && npm install
        cd ../backend && npm install
    
    - name: Run Tests
      run: |
        npm run test
      env:
        CI: true
        MONGODB_URI: mongodb://localhost:27017/codewar_test
    
    - name: Build
      run: |
        cd client && npm run build
        cd ../backend && npm run build

  install-and-test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017
      redis:
        image: redis
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci
          cd client && npm ci
          cd ../backend && npm ci
      
      - name: Run linting
        run: |
          npm run lint
          cd client && npm run lint
          cd ../backend && npm run lint
      
      - name: Run unit tests
        run: |
          npm run test:unit
          cd client && npm run test:unit
          cd ../backend && npm run test:unit
      
      - name: Run integration tests
        run: |
          cd backend && npm run test:integration
        env:
          MONGODB_URI: mongodb://localhost:27017/codewar_test
          JWT_SECRET: test_secret
      
      - name: Upload test coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: coverage/
          retention-days: 14

  security:
    needs: install-and-test
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Run SAST
        uses: github/codeql-action/analyze@v2
        with:
          languages: javascript
      
      - name: Run Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
      
      - name: Run npm audit
        run: |
          npm audit
          cd client && npm audit
          cd ../backend && npm audit

  sonarcloud:
    needs: install-and-test
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Download coverage reports
        uses: actions/download-artifact@v3
        with:
          name: coverage
          path: coverage/
      
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  docker:
    needs: [security, sonarcloud]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    needs: docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'
    environment: staging
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your deployment commands here
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI_STAGING }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}

  deploy-production:
    needs: docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your deployment commands here
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI_PROD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }} 